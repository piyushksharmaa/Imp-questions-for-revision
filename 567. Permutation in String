Approach 1 : In this we have to find whether any permutation of s1 lies in s2 so for this what we are doing here is checking every substring of s2 and matching it with 
          s1 by sorting both of them. And, if we don't find any pair then we will just simply return false.

TC: n2.n1log(n1)

class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        int n1=s1.size();
        int n2=s2.size();
        if(n1>n2){
            return false;
        }
        else{
            sort(s1.begin(),s1.end());
            for(int i=0;i<n2-n1+1;i++){
                string temp=s2.substr(i,n1);
                sort(temp.begin(),temp.end());
                if(temp==s1){
                    return true;
                }
            }
            return false;
        }
    }
};



Approach 2 : So, this was an optimized version of the previous approach as in this what we are doing is to maintain two freq arrays and in 1st freq array we are 
             storing frequencies of characters of s1 and in 2nd freq array we are storing frequency of characters of s2 by maintaing a sliding window of size of 
             first string and increasing it one by one and once we reach size equal to s1.size() then we will check if both the frequency array are same or not.
             And, if not then we will increase j if j-i+1 is less than s1.size and increase both i and j if j-i+1 is equal or greater than s1.size() and also 
             reducing frequency at the same time.


class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        int n1=s1.size();
        int n2=s2.size();
        if(n1>n2){
            return false;
        }
        else{
            vector<int> freq1(26,0);
            vector<int> freq2(26,0);
            for(int i=0;i<n1;i++){
                freq1[s1[i]-'a']++;
            }
            int i=0,j=0;
            while(j<n2){
                freq2[s2[j]-'a']++;
                if(j-i+1==n1){
                    if(freq1==freq2){
                        return true;
                    }
                }
                if(j-i+1<n1){
                    j++;
                }
                else{
                    freq2[s2[i]-'a']--;
                    i++;
                    j++;
                }
            }
            return false;
        }
    }
};
