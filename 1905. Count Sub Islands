Approach: In this question, we have to find island in grid2 then all the place in that island in grid2 which is 1 it must also be 1 in grid1.
          So this is kind of normal question just making it complex by language, if we encounter grid2[i][j] as 1 and grid1[i][j] as 0 then, we have to make check 
          false as it is not be included in our ans.
          One mistake i was doing here is that after assigning check as false then i was returning but no we have to mark that grid[i][j]=0 and its neighbour's 1's 
          as it will not get count in our answer.
          
          
class Solution {
public:
    void solver(int i,int j,int m,int n,vector<vector<int>>& grid1,vector<vector<int>>& grid2,bool& check){
        if(i<0 or j<0 or i>=m or j>=n or grid2[i][j]==0){
            return ;
        }
        if(grid1[i][j]==0){
            check=false;
        }
        grid2[i][j]=0;
        solver(i+1,j,m,n,grid1,grid2,check);
        solver(i-1,j,m,n,grid1,grid2,check);
        solver(i,j+1,m,n,grid1,grid2,check);
        solver(i,j-1,m,n,grid1,grid2,check);
    }
    int countSubIslands(vector<vector<int>>& grid1, vector<vector<int>>& grid2) {
        int m=grid1.size();
        int n=grid1[0].size();
        int count=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid2[i][j]==1 and grid1[i][j]==1){
                    bool check=true;
                    solver(i,j,m,n,grid1,grid2,check);
                    if(check==true){
                        count++; 
                    }
                }
            }
        }
        return count;
    }
};
