/*
Intuition
If we want to find a possible path, DFS will be more efficient. Because DFS will return a possible path if found, while it may not the shortest path.

BFS will try every possible path at the same time.

If we want to find the shortest of all possible paths, BFS is more efficient. It's impossible for DFS to determine which is the shortest before trying all possible paths.
*/
class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n=grid.size();
        if(grid[0][0]==1 or grid[n-1][n-1]==1){return -1;}
        if(grid[0][0]==0 and n==1){return 1;}
        queue<pair<pair<int,int>,int>> q;
        q.push({{0,0},1});
        grid[0][0]=1;
        while(!q.empty()){
            pair<int,int> p=q.front().first;
            int x=p.first;
            int y=p.second;
            int len=q.front().second;
            q.pop();
            vector<pair<int,int>> neighbours={{0,1},{0,-1},{1,0},{-1,0},{1,1},{1,-1},{-1,1},{-1,-1}};
            for(pair<int,int> neighbour:neighbours){
                int newx=neighbour.first+x;
                int newy=neighbour.second+y;
                if(newx>=0 and newy>=0 and newx<n and newy<n and grid[newx][newy]==0){
                    q.push({{newx,newy},len+1});
                    grid[newx][newy]=1;
                    if(newx==n-1 and newy==n-1){
                        return len+1;
                    }
                }
            }
        }
        return -1;
    }
};
