Approach: So, 

Let's understand this approach part by part
So, in base condition when we are reaching end we are returning 0 as we can't get more substrings or partitions.
Then, we are adding our character into the temp string and then making two choices either we partition it from there or not.
op1=INT_MIN/2 -> It is done to avoid any kind of overflow.

So, we can only get a partition at ith index if temp hasn't occurred previously, so checking that condition and if that condition holds then we will insert it into 
our set and then increase our count by 1 and calling solver function for other part of the string and passing "" as temp as we have to now start a fresh new temp.
And, then backtrack it back from our set so to do further processing.

Now coming on to second option here we are not partitioning it and going simply and in the end we are return maximum of both the options.



class Solution {
public:
    int solver(int i,unordered_set<string>& st,string& s,string temp){
        if(i==s.size()){
            return 0;
        }
        temp+=s[i];
        int op1=INT_MIN/2,op2=INT_MIN/2;
        if(st.find(temp)==st.end()){
            st.insert(temp);
            op1=1+solver(i+1,st,s,"");
            st.erase(temp);
        }
        op2=solver(i+1,st,s,temp);
        return max(op1,op2);
    }
    int maxUniqueSplit(string s) {
        unordered_set<string> store;
        return solver(0,store,s,"");
    }
};
